XCLua 1.0 RC1

================================================================================
	00	Table of Contents
================================================================================
00	Table of Contents
01	Overview
02	Installation
	1	Building from source
	2	Installing the binary
03	Care and Feeding
04	Scripting API
	1	Overview
	2	Plugin initialization
	3	Plugin deinitialization
	4	Constants
	5	Functions
			hook_command
			hook_print
			hook_server
			hook_timer
			unhook
			
			command
			commandf
			print
			printf
			emit_print
			send_modes
			
			find_context
			get_context
			set_context
			get_info
			get_prefs
			
			nickcmp
			strip
			
			get_list
05	Credits
AA	Omitted Functions

================================================================================
	01	Overview
================================================================================
	XCLua is, as the name implies, a binary module for X-Chat that allows it to
	load and execute scripts written in Lua. It is written entirely in C for Lua
	5.1 and X-Chat 2.x (2.6 as of this writing, but it should work on 2.4 and
	probably 2.0 as well). It supports both .lua (Lua source) and .lc (Lua
	bytecode) files, and provides both the Lua stdlib and the X-Chat plugin API
	to scripts executing inside it.

================================================================================
	02	Installation
================================================================================
	The first half of this chapter covers building the XCLua DSO from source, if
	you are so inclined; the second half covers installing the binary.

	02.1 Building From Source
	=========================
	You will need:
	- liblua, 5.1 or any compatible version. 5.0 /may/ work but has not been
		tested.
	- a set of Lua headers, notably lua.h lualib.h lauxlib.h
	- xchat-plugin.h; a copy has been provided in the source package. The latest
		version should be at http://xchat.org/docs/xchat-plugin.h
	Procedure:
	- first, edit your makefile. The defaults should be fairly sane, but special
		attention should be paid to LUA, which should point at a Lua 5.1
		interpreter, and LUAC, which should point at a compiler of the same
		version (or something harmless like echo if you don't want to/can't
		compile Lua). This is needed to rebuild the autoexec script (xclua.lua).
	- type 'make' (if on Linux or a reasonably POSIXoid system) or
		'make windows' if on windows.
	FIXME - other platforms?
	- you now have a fresh, tasty DSO.

	02.2 Installing the binary
	==========================
	FIXME

================================================================================
	03	Care and Feeding
================================================================================
	FIXME

================================================================================
	04	Scripting API
================================================================================

	04.1 Overview
	=============
	Scripts have access to two libraries: the Lua stdlib (the entirety of
	Chapter 5 of the Lua manual, in effect) and the X-Chat API, which is
	provided as part of the global table 'xchat' and contains both functions and
	constants. Each script executes inside its own state, and thus does not need
	to worry about collisions with other scripts.
	
	04.2 Plugin Initialization
	==========================
	When loaded, a Lua script is simply compiled into a single function and
	executed. The return value of the script should indicate whether the plugin
	has successfully loaded or not; any true value means it has, and any false
	value means it has not (which in turn means that any hooks created by the
	function will be unhooked, and so forth). For example, the smallest valid
	script:
	
-- begin script
return true
-- end script

	Remember that not returning a value is equivalent to returning nil, which is
	boolean false; forgetting to return a value is the leading cause of
	unloadable scripts.
	
	After executing the script, XCLua looks inside its state for the global
	variables 'plugin_name', 'plugin_description' and 'plugin_version'; these
	are used to populate the Plugins & Scripts window, and will be replaced with
	'(unknown)' if omitted.
	
	A somewhat more interesting script:
	
-- begin script
-- this script successfully loads if it's running inside Lua 5.1, but fails
-- if it detects a different version
-- plugin metadata
plugin_name = "Sample Plugin 1"
plugin_version = "1.0"
plugin_description = "Loads successfully under Lua 5.1 and fails otherwise"
-- initializer
function Init()
	if _VERSION ~= "Lua 5.1" then
		xchat.printf("Expected version 5.1, got '%s' - bailing", _VERSION)
		return false
	end
	return true
end
return Init()
-- end script
	
	04.3 Plugin Deinitialization
	============================
	When a plugin is unloaded - either with /unload, or because the xclua module
	itself is unloading - it is given a chance to clean up after itself. Hooks
	are automatically unhooked afterwards, so they do not have to be explicitly
	cleaned up, but a plugin may have other things to do - menu entries to
	remove, files to close, and so forth. To that end, if a plugin provides a
	global function called 'plugin_deinit', that function will be called with no
	arguments when it's unloaded.
	As on initialization, it must return true or false to indicate success or
	failure; false indicates that the script cannot safely be unloaded at this
	time, and no further action will be taken. Forgetting to give your
	plugin_deinit function a return value can lead to a script that be loaded,
	but never unloaded!
	
	04.4 Constants
	==============
	These are identical to the ones listed in the xchat documentation, only with
	the leading XCHAT_ removed and placed inside the global 'xchat' table.
	Priority: xchat.PRI_HIGHEST xchat.PRI_HIGH xchat.PRI_NORM xchat.PRI_LOW
		xchat.PRI_LOWEST
	Edibility: xchat.EAT_ALL xchat.EAT_NONE xchat.EAT_PLUGIN xchat.EAT_XCHAT
	Stripping: xchat.STRIP_COLOR xchat.STRIP_FORMAT
	Note: xchat.STRIP_COLOUR is supported as a synonym for xchat.STRIP_COLOR.
	
	04.5 Functions
	==============
	Note that not all functions provided by the X-Chat C API are listed here.
	Many functions have been omitted because they are meaningless in Lua (such
	as xchat_free() - Lua is garbage-collected) or because a better interface
	has been provided (the entire xchat_list_* family). For a list of such
	functions, see Appendix A, which lists functions present in the C API but
	not in the Lua one.
	Note that XCLua does not have 'word[]' and 'word_eol[]'; the contents or
	word[] are simply passed in as arguments to the callback function.
	
	userdata xchat.hook_command( string Command, function Callback, [string Help, [number Priority]] )
		This maps to xchat_hook_command(). Help defaults to "(no help text for
		this function)" and Priority to xchat.PRI_NORM.
		Note that when the callback is invoked, its first argument will be the
		/command itself, as that is what's in word[0]. Subsequent arguments are
		the parameters passed to the /command.
		
	userdata xchat.hook_print( string Event, function Callback, [number Priority] )
		This maps to xchat_hook_print(). Priority defaults to xchat.PRI_NORM.
	
	userdata xchat.hook_server( string Message, function Callback, [number Priority] )
		This maps to xchat_hook_server(). Priority defaults to xchat.PRI_NORM.
	
	userdata xchat.hook_timer( number Timeout, function Callback )
		This maps to xchat_hook_timer().
	
	nil xchat.unhook( userdata Hook )
		Takes a function hook (one of the userdatii returned by
		xchat.hook_foo()) and unhooks it. Identical to xchat_unhook().
	
	nil xchat.command( string Command )
	nil xchat.commandf( string Format, ... )
	nil xchat.print( Text )
	nil xchat.printf( Format, ...)
		These functions behave identically to their C counterparts, with the
		caveat that commandf() and printf() use string.format() internally and
		thus may support slightly different modifiers than xchat_commandf()
		and xchat_printf() do.
	
	nil xchat.emit_print( string Event, string ... )
		Same as the C version except that only the first nine arguments (the
		event name and up to 8 extra arguments) are processed. At present this
		is not an issue because the underlying API never uses more than 4.
		
	userdata xchat.find_context( string Server, string Channel )
	userdata xchat.get_context()
	boolean xchat.set_context( userdata Context )
		These functions behave identically to their C counterparts.

	(string|number|bool) xchat.get_prefs( string ... )
	string xchat.get_info( string ... )
		These functions behave identically to their C counterparts, except that
		each can take multiple arguments and will return one value for each
		argument given. For example:
	  local channel, topic = xchat.get_info( 'channel', 'topic' )
	  	xchat.get_info() also supports two new keys: "xclua_version" and
		"lua_version".
	
	number xchat.nickcmp( string Nick1, string Nick2 )
	string xchat.strip( string Text, number Flags )
		These functions behave identically to their C counterparts. Use
		one or more of xchat.STRIP_COLOR and xchat.STRIP_FORMAT (summed
		together) as the Flags to xchat.strip().
	
	table xchat.get_list( string ... )
		For each key given, this function returns a table, integer-indexed and
		containing smaller tables, each one of which contains a set of fields
		(the specific fields being determined by what the key was). If no list
		exists for a given key it returns nil instead. In effect, this function
		(along with standard Lua table manipulation) replaces list_get,
		list_next, list_str, list_int, list_time, and list_fields.

================================================================================
	05	Credits
================================================================================
	Implementation
	==============
	Ben "ToxicFrog" Kelly - design, coding, documentation, etc.
	
	Thanks to
	=========
	SilvereX for the windows build of xchat.
	Julian Stecklina for the Common LISP plugin that gave me this idea in the
		first place.
	Zeeshan Ali for the Scheme plugin that showed me how to use
		xchat_list_fields().
	Dark--Sky, Deb_ooc, and everyone else who helped test the module :)

================================================================================
	Appendix A: Omitted Functions
================================================================================
	xchat_hook_fd		- deemed to be not worth the trouble coming up with a
		way to translate raw file descriptors into something you can manipulate
		in Lua.
	xchat_list_*		- superceded by xchat.get_list() and lua_Tables.
	xchat_free			- Lua is garbage-collected.
	xchat_plugingui_*	- handled automatically by XCLua
	xchat_send_modes	- for loop + xchat_commandf()
